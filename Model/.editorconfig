#### Core Config ####
# https://editorconfig.org/#supported-properties

# It’s the root config
root = true

# Use spaces for all files
[*]
indent_style = space

# Indent size for XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# Indent size for XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# For code files
[*.{cs,csx,vb,vbx}]
indent_size = 4
tab_width = 4
insert_final_newline = true
end_of_line = crlf
charset = utf-8
trim_trailing_whitespace = true

#### Style Config / Language ####
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules?view=vs-2022

# For C# code files
[*.cs]

# this and Me preferences
dotnet_diagnostic.IDE0003.severity = error
dotnet_style_qualification_for_event = false
dotnet_style_qualification_for_field = false
dotnet_style_qualification_for_method = false
dotnet_style_qualification_for_property = false

# Use language keywords instead of framework type names for type references
dotnet_diagnostic.IDE0049.severity = error
dotnet_style_predefined_type_for_locals_parameters_members = true
dotnet_style_predefined_type_for_member_access = true

# Order modifiers
dotnet_diagnostic.IDE0036.severity = error
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async

# Add accessibility modifiers
dotnet_diagnostic.IDE0040.severity = error
dotnet_style_require_accessibility_modifiers = for_non_interface_members

# Add readonly modifier
dotnet_diagnostic.IDE0044.severity = suggestion
dotnet_style_readonly_field = true

# Make local function static
dotnet_diagnostic.IDE0062.severity = suggestion
csharp_prefer_static_local_function = true

# Make struct fields writable
dotnet_diagnostic.IDE0064.severity = suggestion

# Parentheses preferences
dotnet_diagnostic.IDE0048.severity = suggestion
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_operators = never_if_unnecessary
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity

# Add missing cases to switch statement
dotnet_diagnostic.IDE0010.severity = error
dotnet_diagnostic.IDE0072.severity = error

# Use object initializers
dotnet_diagnostic.IDE0017.severity = suggestion
dotnet_style_object_initializer = true

# Inline variable declaration
dotnet_diagnostic.IDE0018.severity = suggestion
csharp_style_inlined_variable_declaration = true

# Use collection initializers
dotnet_diagnostic.IDE0028.severity = suggestion
dotnet_style_collection_initializer = true

# Use auto property
dotnet_diagnostic.IDE0032.severity = suggestion
dotnet_style_prefer_auto_properties = true

# Use explicitly provided tuple name
dotnet_diagnostic.IDE0033.severity = error
dotnet_style_explicit_tuple_names = true

# Simplify 'default' expression
dotnet_diagnostic.IDE0034.severity = suggestion
csharp_prefer_simple_default_expression = true

# Use inferred member name
dotnet_diagnostic.IDE0037.severity = suggestion
dotnet_style_prefer_inferred_tuple_names = true
dotnet_style_prefer_inferred_anonymous_type_member_names = true

# Use local function instead of lambda
dotnet_diagnostic.IDE0039.severity = suggestion
csharp_style_prefer_local_over_anonymous_function = true

# Deconstruct variable declaration
dotnet_diagnostic.IDE0042.severity = suggestion
csharp_style_deconstructed_variable_declaration = true

# Use conditional expression for assignment
dotnet_diagnostic.IDE0045.severity = warning
dotnet_style_prefer_conditional_expression_over_assignment = true

# Use conditional expression for return
dotnet_diagnostic.IDE0046.severity = warning
dotnet_style_prefer_conditional_expression_over_return = true

# Convert anonymous type to tuple
dotnet_diagnostic.IDE0050.severity = warning

# Use compound assignment
dotnet_diagnostic.IDE0054.severity = error
dotnet_diagnostic.IDE0074.severity = error
dotnet_style_prefer_compound_assignment = true

# Use index operator
dotnet_diagnostic.IDE0056.severity = suggestion
csharp_style_prefer_index_operator = true

# Use range operator
dotnet_diagnostic.IDE0057.severity = suggestion
csharp_style_prefer_range_operator = true

# Use 'System.HashCode.Combine'
dotnet_diagnostic.IDE0070.severity = suggestion

# Simplify interpolation
dotnet_diagnostic.IDE0071.severity = error
dotnet_style_prefer_simplified_interpolation = true

# Simplify conditional expression
dotnet_diagnostic.IDE0075.severity = error
dotnet_style_prefer_simplified_boolean_expressions = true

# Convert 'typeof' to 'nameof'
dotnet_diagnostic.IDE0082.severity = error

# Simplify 'new' expression
dotnet_diagnostic.IDE0090.severity = suggestion
csharp_style_implicit_object_creation_when_type_is_apparent = true

# Use tuple to swap values
dotnet_diagnostic.IDE0180.severity = error
csharp_style_prefer_tuple_swap = true

# Namespace declaration
dotnet_diagnostic.IDE0160.severity = error
csharp_style_namespace_declarations = block_scoped

# Use throw expression
dotnet_diagnostic.IDE0016.severity = suggestion
csharp_style_throw_expression = true

# Use coalesce expression
dotnet_diagnostic.IDE0029.severity = suggestion
dotnet_diagnostic.IDE0030.severity = suggestion
dotnet_style_coalesce_expression = true

# Use null propagation
dotnet_diagnostic.IDE0031.severity = suggestion
dotnet_style_null_propagation = true

# Use is null check
dotnet_diagnostic.IDE0041.severity = error
dotnet_style_prefer_is_null_check_over_reference_equality_method = true

# Prefer null check over type check
dotnet_diagnostic.IDE0150.severity = suggestion
csharp_style_prefer_null_check_over_type_check = true

# Use conditional delegate call
dotnet_diagnostic.IDE1005.severity = suggestion
csharp_style_conditional_delegate_call = true

# 'var' preferences
dotnet_diagnostic.IDE0007.severity = silent
csharp_style_var_elsewhere = false
csharp_style_var_for_built_in_types = true
csharp_style_var_when_type_is_apparent = true

# Expression-bodied-members
dotnet_diagnostic.IDE0021.severity = silent
dotnet_diagnostic.IDE0022.severity = silent
dotnet_diagnostic.IDE0023.severity = silent
dotnet_diagnostic.IDE0024.severity = silent
dotnet_diagnostic.IDE0026.severity = silent
dotnet_diagnostic.IDE0027.severity = silent
dotnet_diagnostic.IDE0053.severity = silent
dotnet_diagnostic.IDE0061.severity = silent
csharp_style_expression_bodied_constructors = false
csharp_style_expression_bodied_methods = false
csharp_style_expression_bodied_properties = true
csharp_style_expression_bodied_operators = false
csharp_style_expression_bodied_indexers = true
csharp_style_expression_bodied_accessors = true
csharp_style_expression_bodied_lambdas = true
csharp_style_expression_bodied_local_functions = false

# Pattern matching
dotnet_diagnostic.IDE0019.severity = suggestion
dotnet_diagnostic.IDE0020.severity = suggestion
dotnet_diagnostic.IDE0038.severity = suggestion
dotnet_diagnostic.IDE0066.severity = suggestion
dotnet_diagnostic.IDE0078.severity = silent
dotnet_diagnostic.IDE0083.severity = suggestion
dotnet_diagnostic.IDE0170.severity = suggestion
csharp_style_pattern_matching_over_as_with_null_check = true
csharp_style_pattern_matching_over_is_with_cast_check = true
csharp_style_prefer_switch_expression = true
csharp_style_prefer_pattern_matching = true
csharp_style_prefer_not_pattern = true
csharp_style_prefer_extended_property_pattern = true

# Add braces
dotnet_diagnostic.IDE0011.severity = error
csharp_prefer_braces = true

# Use simple 'using' statement
dotnet_diagnostic.IDE0063.severity = suggestion
csharp_prefer_simple_using_statement = true

# 'using' directive placement
dotnet_diagnostic.IDE0065.severity = error
csharp_using_directive_placement = outside_namespace

# Require file header
dotnet_diagnostic.IDE0073.severity = silent
file_header_template = unset


#### Style Config / Unnecessary code ####
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/unnecessary-code-rules?view=vs-2022

# For C# code files
[*.cs]

# Simplify name
dotnet_diagnostic.IDE0001.severity = silent

# Simplify member access
dotnet_diagnostic.IDE0002.severity = error

# Remove unnecessary cast
dotnet_diagnostic.IDE0004.severity = error

# Remove unnecessary import
dotnet_diagnostic.IDE0005.severity = error

# Remove unreachable code
dotnet_diagnostic.IDE0035.severity = error

# Remove unused private member
dotnet_diagnostic.IDE0051.severity = warning

# Remove unread private member
dotnet_diagnostic.IDE0052.severity = suggestion

# Remove unused expression value
dotnet_diagnostic.IDE0058.severity = error
csharp_style_unused_value_expression_statement_preference = discard_variable

# Remove unnecessary value assignment
dotnet_diagnostic.IDE0059.severity = error
csharp_style_unused_value_assignment_preference = discard_variable

# Remove unused parameter
dotnet_diagnostic.IDE0060.severity = error
dotnet_code_quality_unused_parameters = all

# Remove unnecessary suppression
dotnet_diagnostic.IDE0079.severity = suggestion
dotnet_remove_unnecessary_suppression_exclusions = none

# Remove unnecessary suppression operator
dotnet_diagnostic.IDE0080.severity = silent

# Remove unnecessary equality operator
dotnet_diagnostic.IDE0100.severity = error

# Remove unnecessary discard
dotnet_diagnostic.IDE0110.severity = error


#### Style Config / Miscellaneous ####
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/miscellaneous-rules?view=vs-2022

# For C# code files
[*.cs]

# Remove invalid global 'SuppressMessageAttribute'
dotnet_diagnostic.IDE0076.severity = suggestion

# Avoid legacy format target in global 'SuppressMessageAttribute'
dotnet_diagnostic.IDE0077.severity = suggestion


#### Style Config / Formatting rules ####
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0055?view=vs-2022

# For C# code files
[*.cs]

# Rule violations lead to errors during build stage
dotnet_diagnostic.IDE0055.severity = error

# Sort “using” directives
dotnet_sort_system_directives_first = false

# Group “using” directives
dotnet_separate_import_directive_groups = false

# Namespace should match folder structure
dotnet_style_namespace_match_folder = false

# New-line options
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation options
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = one_less_than_current
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents_when_block = true

# Spacing options
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_after_comma = true
csharp_space_before_comma = false
csharp_space_after_dot = false
csharp_space_before_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false

# Wrap options
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true


#### Style Config / Naming rules ####
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/naming-rules?view=vs-2022

# For C# code files
[*.cs]

# Rule violations lead to errors during build stage
dotnet_diagnostic.IDE1006.severity = error

# Naming styles
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
dotnet_naming_style.camel_case_style.capitalization = camel_case
dotnet_naming_style.pascal_case_with_i_style.capitalization = pascal_case
dotnet_naming_style.pascal_case_with_i_style.required_prefix = I
dotnet_naming_style.pascal_case_with_t_style.capitalization = pascal_case
dotnet_naming_style.pascal_case_with_t_style.required_prefix = T
dotnet_naming_style.camel_case_underscore_style.capitalization = camel_case
dotnet_naming_style.camel_case_underscore_style.required_prefix = _

# Interfaces should be “PascalCase” and start with “I”
dotnet_naming_symbols.interfaces.applicable_kinds = interface
dotnet_naming_symbols.interfaces.applicable_accessibilities = *
dotnet_naming_symbols.interfaces.required_modifiers =
dotnet_naming_rule.interfaces_rule.severity = error
dotnet_naming_rule.interfaces_rule.symbols = interfaces
dotnet_naming_rule.interfaces_rule.style = pascal_case_with_i_style

# Generic Type parameters should be “PascalCase” and start with “T”
dotnet_naming_symbols.type_parameters.applicable_kinds = type_parameter
dotnet_naming_symbols.type_parameters.applicable_accessibilities = *
dotnet_naming_symbols.type_parameters.required_modifiers =
dotnet_naming_rule.type_parameters_rule.severity = error
dotnet_naming_rule.type_parameters_rule.symbols = type_parameters
dotnet_naming_rule.type_parameters_rule.style = pascal_case_with_t_style

# Parameters should be “camelCase”
dotnet_naming_symbols.parameters.applicable_kinds = parameter
dotnet_naming_symbols.parameters.applicable_accessibilities = *
dotnet_naming_symbols.parameters.required_modifiers =
dotnet_naming_rule.parameters_rule.severity = error
dotnet_naming_rule.parameters_rule.symbols = parameters, local
dotnet_naming_rule.parameters_rule.style = camel_case_style

# Private fields should be “camelCase” and start with “_”
dotnet_naming_symbols.private_fields.applicable_kinds = field, local
dotnet_naming_symbols.private_fields.applicable_accessibilities = private, protected, protected_internal, internal, private_protected
dotnet_naming_symbols.private_fields.required_modifiers =
dotnet_naming_rule.private_fields_rule.severity = error
dotnet_naming_rule.private_fields_rule.symbols = private_fields
dotnet_naming_rule.private_fields_rule.style = camel_case_underscore_style

# Other elements should be “PascalCase”
dotnet_naming_symbols.elements.applicable_kinds = namespace, class, enum, struct, delegate, event, method, property, field, local_function
dotnet_naming_symbols.elements.applicable_accessibilities = *
dotnet_naming_symbols.elements.required_modifiers =
dotnet_naming_rule.elements_rule.severity = error
dotnet_naming_rule.elements_rule.symbols = elements
dotnet_naming_rule.elements_rule.style = pascal_case_style


#### Quality Config / Design rules ####
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/design-warnings

# For C# code files
[*.cs]

# Define rules for the entire codebase
dotnet_code_quality.api_surface = all

# Do not declare static members on generic types
dotnet_diagnostic.CA1000.severity = silent

# Types that own disposable fields should be disposable
dotnet_diagnostic.CA1001.severity = silent

# Do not expose generic lists
dotnet_diagnostic.CA1002.severity = none

# Use generic event handler instances
dotnet_diagnostic.CA1003.severity = none

# Avoid excessive parameters on generic types
dotnet_diagnostic.CA1005.severity = none

# Enums should have zero value
dotnet_diagnostic.CA1008.severity = none

# Collections should implement generic interface
dotnet_diagnostic.CA1010.severity = silent

# Abstract types should not have constructors
dotnet_diagnostic.CA1012.severity = none

# Mark assemblies with CLSCompliantAttribute
dotnet_diagnostic.CA1014.severity = none

# Mark assemblies with AssemblyVersionAttribute
dotnet_diagnostic.CA1016.severity = suggestion

# Mark assemblies with ComVisibleAttribute
dotnet_diagnostic.CA1017.severity = none

# Mark attributes with AttributeUsageAttribute
dotnet_diagnostic.CA1018.severity = suggestion

# Define accessors for attribute arguments
dotnet_diagnostic.CA1019.severity = none

# Avoid out parameters
dotnet_diagnostic.CA1021.severity = none

# Use properties where appropriate
dotnet_diagnostic.CA1024.severity = none

# Mark enums with FlagsAttribute
dotnet_diagnostic.CA1027.severity = none

# Enum storage should be Int32
dotnet_diagnostic.CA1028.severity = none

# Use events where appropriate
dotnet_diagnostic.CA1030.severity = none

# Do not catch general exception types
dotnet_diagnostic.CA1031.severity = error

# Implement standard exception constructors
dotnet_diagnostic.CA1032.severity = none

# Interface methods should be callable by child types
dotnet_diagnostic.CA1033.severity = none

# Nested types should not be visible
dotnet_diagnostic.CA1034.severity = none

# Override methods on comparable types
dotnet_diagnostic.CA1036.severity = silent

# Avoid empty interfaces
dotnet_diagnostic.CA1040.severity = none

# Provide obsolete attribute message
dotnet_diagnostic.CA1041.severity = suggestion

# Use integral or string argument for indexers
dotnet_diagnostic.CA1043.severity = none

# Properties should not be write only
dotnet_diagnostic.CA1044.severity = none

# Do not pass types by reference
dotnet_diagnostic.CA1045.severity = none

# Do not overload operator equals on reference types
dotnet_diagnostic.CA1046.severity = none

# Do not declare protected members in sealed types
dotnet_diagnostic.CA1047.severity = suggestion

# Declare types in namespaces
dotnet_diagnostic.CA1050.severity = suggestion

# Do not declare visible instance fields
dotnet_diagnostic.CA1051.severity = silent

# Static holder types should be sealed
dotnet_diagnostic.CA1052.severity = none

# URI parameters should not be strings
dotnet_diagnostic.CA1054.severity = none

# URI return values should not be strings
dotnet_diagnostic.CA1055.severity = none

# URI properties should not be strings
dotnet_diagnostic.CA1056.severity = none

# Types should not extend certain base types
dotnet_diagnostic.CA1058.severity = none

# Move P/Invokes to NativeMethods class
dotnet_diagnostic.CA1060.severity = none

# Do not hide base class methods
dotnet_diagnostic.CA1061.severity = suggestion

# Validate arguments of public methods
dotnet_diagnostic.CA1062.severity = none

# Implement IDisposable correctly
dotnet_diagnostic.CA1063.severity = none

# Exceptions should be public
dotnet_diagnostic.CA1064.severity = none

# Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1065.severity = none

# Implement IEquatable when overriding Equals
dotnet_diagnostic.CA1066.severity = none

# Override Equals when implementing IEquatable
dotnet_diagnostic.CA1067.severity = suggestion

# CancellationToken parameters must come last
dotnet_diagnostic.CA1068.severity = suggestion

# Enum should not have duplicate values
dotnet_diagnostic.CA1069.severity = suggestion

# Do not declare event fields as virtual
dotnet_diagnostic.CA1070.severity = suggestion


#### Quality Config / Documentation rules ####
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/documentation-warnings

# For C# code files
[*.cs]

# Avoid using cref tags with a prefix
dotnet_diagnostic.CA1200.severity = silent


#### Quality Config / Globalization rules ####
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/globalization-warnings

# For C# code files
[*.cs]

# Do not pass literals as localized parameters
dotnet_diagnostic.CA1303.severity = none

# Specify CultureInfo
dotnet_diagnostic.CA1304.severity = silent

# Specify IFormatProvider
dotnet_diagnostic.CA1305.severity = silent

# Specify StringComparison for clarity
dotnet_diagnostic.CA1307.severity = none

# Normalize strings to uppercase analyzer
dotnet_diagnostic.CA1308.severity = none

# Use ordinal StringComparison
dotnet_diagnostic.CA1309.severity = silent

# Specify StringComparison for correctness
dotnet_diagnostic.CA1310.severity = silent

# Specify marshalling for P/Invoke string arguments
dotnet_diagnostic.CA2101.severity = suggestion


#### Quality Config / Portability and interoperability rules ####
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/interoperability-warnings

# For C# code files
[*.cs]

# P/Invokes should not be visible
dotnet_diagnostic.CA1401.severity = suggestion

# Validate platform compatibility
dotnet_diagnostic.CA1416.severity = warning

# Do not use OutAttribute on string parameters for P/Invokes
dotnet_diagnostic.CA1417.severity = warning

# Use valid platform string
dotnet_diagnostic.CA1418.severity = warning

# Provide a parameterless constructor that is as visible as the containing type for concrete types derived from 'System.Runtime.InteropServices.SafeHandle'
dotnet_diagnostic.CA1419.severity = suggestion


#### Quality Config / Maintainability rules ####
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/maintainability-warnings

# For C# code files
[*.cs]

# Avoid excessive inheritance
dotnet_diagnostic.CA1501.severity = none

# Avoid excessive complexity
dotnet_diagnostic.CA1502.severity = none

# Avoid unmaintainable code
dotnet_diagnostic.CA1505.severity = none

# Avoid excessive class coupling
dotnet_diagnostic.CA1506.severity = none

# Use nameof in place of string
dotnet_diagnostic.CA1507.severity = suggestion

# Avoid dead conditional code
dotnet_diagnostic.CA1508.severity = error

# Invalid entry in code metrics configuration file
dotnet_diagnostic.CA1509.severity = none


#### Quality Config / Naming rules ####
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/naming-warnings

# For C# code files
[*.cs]

# Do not name enum values 'Reserved'
dotnet_diagnostic.CA1700.severity = none

# Identifiers should not contain underscores
# Only for public and internal code since private fields can start with an underscore
dotnet_diagnostic.CA1707.severity = error
dotnet_code_quality.CA1707.api_surface = public, internal

# Identifiers should differ by more than case
dotnet_diagnostic.CA1708.severity = error

# Identifiers should have correct suffix
dotnet_diagnostic.CA1710.severity = silent

# Identifiers should not have incorrect suffix
dotnet_diagnostic.CA1711.severity = silent

# Do not prefix enum values with type name
dotnet_diagnostic.CA1712.severity = silent

# Events should not have before or after prefix
dotnet_diagnostic.CA1713.severity = none

# Identifiers should have correct prefix
dotnet_diagnostic.CA1715.severity = silent

# Identifiers should not match keywords
dotnet_diagnostic.CA1716.severity = error

# Identifiers should not contain type names
dotnet_diagnostic.CA1720.severity = silent

# Property names should not match get methods
dotnet_diagnostic.CA1721.severity = error

# Type names should not match namespaces
dotnet_diagnostic.CA1724.severity = none

# Parameter names should match base declaration
dotnet_diagnostic.CA1725.severity = error

# Use PascalCase for named placeholders
dotnet_diagnostic.CA1727.severity = silent


#### Quality Config / Performance rules ####
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/performance-warnings

# For C# code files
[*.cs]

# Use literals where appropriate
dotnet_diagnostic.CA1802.severity = none

# Do not initialize unnecessarily
dotnet_diagnostic.CA1805.severity = error

# Do not ignore method results
dotnet_diagnostic.CA1806.severity = error

# Initialize reference type static fields inline
dotnet_diagnostic.CA1810.severity = none

# Avoid uninstantiated internal classes
dotnet_diagnostic.CA1812.severity = none

# Avoid unsealed attributes
dotnet_diagnostic.CA1813.severity = none

# Prefer jagged arrays over multidimensional
dotnet_diagnostic.CA1814.severity = none

# Override equals and operator equals on value types
dotnet_diagnostic.CA1815.severity = none

# Properties should not return arrays
dotnet_diagnostic.CA1819.severity = none

# Test for empty strings using string length
dotnet_diagnostic.CA1820.severity = error

# Remove empty finalizers
dotnet_diagnostic.CA1821.severity = suggestion

# Mark members as static
dotnet_diagnostic.CA1822.severity = suggestion

# Avoid unused private fields
dotnet_diagnostic.CA1823.severity = error

# Mark assemblies with NeutralResourcesLanguageAttribute
dotnet_diagnostic.CA1824.severity = suggestion

# Avoid zero-length array allocations
dotnet_diagnostic.CA1825.severity = suggestion

# Use property instead of Linq Enumerable method
dotnet_diagnostic.CA1826.severity = suggestion

# Do not use Count/LongCount when Any can be used
dotnet_diagnostic.CA1827.severity = suggestion

# Do not use CountAsync/LongCountAsync when AnyAsync can be used
dotnet_diagnostic.CA1828.severity = suggestion

# Use Length/Count property instead of Enumerable.Count method
dotnet_diagnostic.CA1829.severity = suggestion

# Prefer strongly-typed Append and Insert method overloads on StringBuilder
dotnet_diagnostic.CA1830.severity = suggestion

# Use AsSpan instead of Range-based indexers for string when appropriate
dotnet_diagnostic.CA1831.severity = warning

# Use AsSpan or AsMemory instead of Range-based indexers for getting ReadOnlySpan or ReadOnlyMemory portion of an array
dotnet_diagnostic.CA1832.severity = suggestion

# Use AsSpan or AsMemory instead of Range-based indexers for getting Span or Memory portion of an array
dotnet_diagnostic.CA1833.severity = suggestion

# Use StringBuilder.Append(char) for single character strings
dotnet_diagnostic.CA1834.severity = suggestion

# Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'
dotnet_diagnostic.CA1835.severity = suggestion

# Prefer IsEmpty over Count when available
dotnet_diagnostic.CA1836.severity = suggestion

# Use Environment.ProcessId instead of Process.GetCurrentProcess().Id
dotnet_diagnostic.CA1837.severity = suggestion

# Avoid StringBuilder parameters for P/Invokes
dotnet_diagnostic.CA1838.severity = silent

# Use Environment.ProcessPath instead of Process.GetCurrentProcess().MainModule.FileName
dotnet_diagnostic.CA1839.severity = suggestion

# Use Environment.CurrentManagedThreadId instead of Thread.CurrentThread.ManagedThreadId
dotnet_diagnostic.CA1840.severity = suggestion

# Prefer Dictionary Contains methods
dotnet_diagnostic.CA1841.severity = suggestion

# Do not use 'WhenAll' with a single task
dotnet_diagnostic.CA1842.severity = suggestion

# Do not use 'WaitAll' with a single task
dotnet_diagnostic.CA1843.severity = suggestion

# Provide memory-based overrides of async methods when subclassing 'Stream'
dotnet_diagnostic.CA1844.severity = suggestion

# Use span-based 'string.Concat'
dotnet_diagnostic.CA1845.severity = suggestion

# Prefer AsSpan over Substring
dotnet_diagnostic.CA1846.severity = suggestion

# Use char literal for a single character lookup
dotnet_diagnostic.CA1847.severity = suggestion

# Use the LoggerMessage delegates
dotnet_diagnostic.CA1848.severity = silent


#### Quality Config / Reliability rules ####
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/reliability-warnings

# For C# code files
[*.cs]

# Dispose objects before losing scope
dotnet_diagnostic.CA2000.severity = none

# Do not lock on objects with weak identity
dotnet_diagnostic.CA2002.severity = none

# Do not directly await a Task
dotnet_diagnostic.CA2007.severity = none

# Do not create tasks without passing a TaskScheduler
dotnet_diagnostic.CA2008.severity = none

# Do not call ToImmutableCollection on an ImmutableCollection value
dotnet_diagnostic.CA2009.severity = suggestion

# Do not assign property within its setter
dotnet_diagnostic.CA2011.severity = suggestion

# Use ValueTasks correctly
dotnet_diagnostic.CA2012.severity = suggestion

# Do not use ReferenceEquals with value types
dotnet_diagnostic.CA2013.severity = warning

# Do not use stackalloc in loops.
dotnet_diagnostic.CA2014.severity = warning

# Do not define finalizers for types derived from MemoryManager<T>
dotnet_diagnostic.CA2015.severity = warning

# Forward the CancellationToken parameter to methods that take one
dotnet_diagnostic.CA2016.severity = suggestion

# Parameter count mismatch
dotnet_diagnostic.CA2017.severity = warning

# The count argument to Buffer.BlockCopy should specify the number of bytes to copy
dotnet_diagnostic.CA2018.severity = warning


#### Quality Config / Security rules ####
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/security-warnings

# For C# code files
[*.cs]

# Review SQL queries for security vulnerabilities
dotnet_diagnostic.CA2100.severity = none

# Review visible event handlers
dotnet_diagnostic.CA2109.severity = none

# Seal methods that satisfy private interfaces
dotnet_diagnostic.CA2119.severity = none

# Avoid handling Corrupted State Exceptions
dotnet_diagnostic.CA2153.severity = none

# Do not use insecure deserializer BinaryFormatter
dotnet_diagnostic.CA2300.severity = none

# Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder
dotnet_diagnostic.CA2301.severity = none

# Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize
dotnet_diagnostic.CA2302.severity = none

# Do not use insecure deserializer LosFormatter
dotnet_diagnostic.CA2305.severity = none

# Do not use insecure deserializer NetDataContractSerializer
dotnet_diagnostic.CA2310.severity = none

# Do not deserialize without first setting NetDataContractSerializer.Binder
dotnet_diagnostic.CA2311.severity = none

# Ensure NetDataContractSerializer.Binder is set before deserializing
dotnet_diagnostic.CA2312.severity = none

# Do not use insecure deserializer ObjectStateFormatter
dotnet_diagnostic.CA2315.severity = none

# Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver
dotnet_diagnostic.CA2321.severity = none

# Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing
dotnet_diagnostic.CA2322.severity = none

# Do not use TypeNameHandling values other than None
dotnet_diagnostic.CA2326.severity = none

# Do not use insecure JsonSerializerSettings
dotnet_diagnostic.CA2327.severity = none

# Ensure that JsonSerializerSettings are secure
dotnet_diagnostic.CA2328.severity = none

# Do not deserialize with JsonSerializer using an insecure configuration
dotnet_diagnostic.CA2329.severity = none

# Ensure that JsonSerializer has a secure configuration when deserializing
dotnet_diagnostic.CA2330.severity = none

# Ensure DataTable.ReadXml()'s input is trusted
dotnet_diagnostic.CA2350.severity = none

# Ensure DataSet.ReadXml()'s input is trusted
dotnet_diagnostic.CA2351.severity = none

# Unsafe DataSet or DataTable in serializable type can be vulnerable to remote code execution attacks
dotnet_diagnostic.CA2352.severity = none

# Unsafe DataSet or DataTable in serializable type
dotnet_diagnostic.CA2353.severity = none

# Unsafe DataSet or DataTable in deserialized object graph can be vulnerable to remote code execution attack
dotnet_diagnostic.CA2354.severity = none

# Unsafe DataSet or DataTable in deserialized object graph
dotnet_diagnostic.CA2355.severity = none

# Unsafe DataSet or DataTable in web deserialized object graph
dotnet_diagnostic.CA2356.severity = none

# Ensure autogenerated class containing DataSet.ReadXml() is not used with untrusted data
dotnet_diagnostic.CA2361.severity = none

# Unsafe DataSet or DataTable in autogenerated serializable type can be vulnerable to remote code execution attacks
dotnet_diagnostic.CA2362.severity = none

# Review code for SQL injection vulnerabilities
dotnet_diagnostic.CA3001.severity = none

# Review code for XSS vulnerabilities
dotnet_diagnostic.CA3002.severity = none

# Review code for file path injection vulnerabilities
dotnet_diagnostic.CA3003.severity = none

# Review code for information disclosure vulnerabilities
dotnet_diagnostic.CA3004.severity = none

# Review code for LDAP injection vulnerabilities
dotnet_diagnostic.CA3005.severity = none

# Review code for process command injection vulnerabilities
dotnet_diagnostic.CA3006.severity = none

# Review code for open redirect vulnerabilities
dotnet_diagnostic.CA3007.severity = none

# Review code for XPath injection vulnerabilities
dotnet_diagnostic.CA3008.severity = none

# Review code for XML injection vulnerabilities
dotnet_diagnostic.CA3009.severity = none

# Review code for XAML injection vulnerabilities
dotnet_diagnostic.CA3010.severity = none

# Review code for DLL injection vulnerabilities
dotnet_diagnostic.CA3011.severity = none

# Review code for regex injection vulnerabilities
dotnet_diagnostic.CA3012.severity = none

# Do not add schema by URL
dotnet_diagnostic.CA3061.severity = silent

# Insecure DTD Processing
dotnet_diagnostic.CA3075.severity = silent

# Insecure XSLT Script Execution
dotnet_diagnostic.CA3076.severity = silent

# Insecure Processing in API Design, XML Document and XML Text Reader
dotnet_diagnostic.CA3077.severity = silent

# Mark verb handlers with ValidateAntiForgeryToken
dotnet_diagnostic.CA3147.severity = silent

# Do not use weak cryptographic algorithms
dotnet_diagnostic.CA5350.severity = silent

# Do not use broken cryptographic algorithms
dotnet_diagnostic.CA5351.severity = silent

# Approved cipher mode
dotnet_diagnostic.CA5358.severity = none

# Do not disable certificate validation
dotnet_diagnostic.CA5359.severity = silent

# Do not call dangerous methods in deserialization
dotnet_diagnostic.CA5360.severity = silent

# Do not disable SChannel use of strong crypto
dotnet_diagnostic.CA5361.severity = none

# Potential reference cycle in deserialized object graph
dotnet_diagnostic.CA5362.severity = none

# Do not disable request validation
dotnet_diagnostic.CA5363.severity = silent

# Do not use deprecated security protocols
dotnet_diagnostic.CA5364.severity = silent

# Do not disable HTTP header checking
dotnet_diagnostic.CA5365.severity = silent

# Use XmlReader for DataSet Read XML
dotnet_diagnostic.CA5366.severity = silent

# Do not serialize type with pointer fields
dotnet_diagnostic.CA5367.severity = none

# Set ViewStateUserKey for classes derived from page
dotnet_diagnostic.CA5368.severity = silent

# Use XmlReader for deserialize
dotnet_diagnostic.CA5369.severity = silent

# Use XmlReader for validating reader
dotnet_diagnostic.CA5370.severity = silent

# Use xml reader for schema read
dotnet_diagnostic.CA5371.severity = silent

# Use XmlReader for XPathDocument
dotnet_diagnostic.CA5372.severity = silent

# Do not use obsolete key derivation function
dotnet_diagnostic.CA5373.severity = silent

# Do not use XslTransform
dotnet_diagnostic.CA5374.severity = silent

# Do not use account shared access signature
dotnet_diagnostic.CA5375.severity = none

# Use SharedAccessProtocol HttpsOnly
dotnet_diagnostic.CA5376.severity = none

# Use container level access policy
dotnet_diagnostic.CA5377.severity = none

# Do not disable ServicePointManagerSecurityProtocols
dotnet_diagnostic.CA5378.severity = none

# Ensure key derivation function algorithm is sufficiently strong
dotnet_diagnostic.CA5379.severity = silent

# Do not add certificates to root store
dotnet_diagnostic.CA5380.severity = none

# Ensure certificates are not added to root store
dotnet_diagnostic.CA5381.severity = none

# Use secure cookies in ASP.NET Core
dotnet_diagnostic.CA5382.severity = none

# Ensure use secure cookies in ASP.NET Core
dotnet_diagnostic.CA5383.severity = none

# Do not use digital signature algorithm
dotnet_diagnostic.CA5384.severity = silent

# Use Rivest–Shamir–Adleman algorithm with sufficient key size
dotnet_diagnostic.CA5385.severity = silent

# Avoid hardcoding SecurityProtocolType value
dotnet_diagnostic.CA5386.severity = none

# Do not use weak key derivation function with insufficient iteration count
dotnet_diagnostic.CA5387.severity = none

# Ensure sufficient iteration count when using weak key derivation function
dotnet_diagnostic.CA5388.severity = none

# Do not add archive item's path to the target file system path
dotnet_diagnostic.CA5389.severity = none

# Do not hard code encryption key
dotnet_diagnostic.CA5390.severity = none

# Use antiforgery tokens in ASP.NET Core MVC controllers
dotnet_diagnostic.CA5391.severity = none

# Use DefaultDllImportSearchPaths attribute for P/Invokes
dotnet_diagnostic.CA5392.severity = none

# Do not use unsafe DllImportSearchPath value
dotnet_diagnostic.CA5393.severity = none

# Do not use insecure randomness
dotnet_diagnostic.CA5394.severity = none

# Miss HttpVerb attribute for action methods
dotnet_diagnostic.CA5395.severity = none

# Set HttpOnly to true for HttpCookie
dotnet_diagnostic.CA5396.severity = none

# Do not use deprecated SslProtocols values
dotnet_diagnostic.CA5397.severity = silent

# Avoid hardcoded SslProtocols values
dotnet_diagnostic.CA5398.severity = none

# Definitely disable HttpClient certificate revocation list check
dotnet_diagnostic.CA5399.severity = none

# Ensure HttpClient certificate revocation list check is not disabled
dotnet_diagnostic.CA5400.severity = none

# Do not use CreateEncryptor with non-default IV
dotnet_diagnostic.CA5401.severity = none

# Use CreateEncryptor with the default IV
dotnet_diagnostic.CA5402.severity = none

# Do not hard code certificate
dotnet_diagnostic.CA5403.severity = none


#### Quality Config / Usage rules ####
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/usage-warnings

# For C# code files
[*.cs]

# Review unused parameters
dotnet_diagnostic.CA1801.severity = none

# Call GC.SuppressFinalize correctly
dotnet_diagnostic.CA1816.severity = suggestion

# Rethrow to preserve stack details
dotnet_diagnostic.CA2200.severity = warning

# Do not raise reserved exception types
dotnet_diagnostic.CA2201.severity = silent

# Initialize static fields inline
dotnet_diagnostic.CA2207.severity = none

# Instantiate argument exceptions correctly
dotnet_diagnostic.CA2208.severity = suggestion

# Non constant fields should not be visible
dotnet_diagnostic.CA2211.severity = error

# Disposable fields should be disposed
dotnet_diagnostic.CA2213.severity = none

# Do not call overridable methods in constructors
dotnet_diagnostic.CA2214.severity = none

# Dispose methods should call base class dispose
dotnet_diagnostic.CA2215.severity = silent

# Disposable types should declare finalizer
dotnet_diagnostic.CA2216.severity = none

# Do not mark enums with FlagsAttribute
dotnet_diagnostic.CA2217.severity = none

# Do not raise exceptions in exception clauses
dotnet_diagnostic.CA2219.severity = suggestion

# Operator overloads have named alternates
dotnet_diagnostic.CA2225.severity = none

# Operators should have symmetrical overloads
dotnet_diagnostic.CA2226.severity = none

# Collection properties should be read only
dotnet_diagnostic.CA2227.severity = none

# Implement serialization constructors
dotnet_diagnostic.CA2229.severity = silent

# Overload operator equals on overriding ValueType.Equals
dotnet_diagnostic.CA2231.severity = suggestion

# Pass System.Uri objects instead of strings
dotnet_diagnostic.CA2234.severity = none

# Mark all non-serializable fields
dotnet_diagnostic.CA2235.severity = none

# Mark ISerializable types with SerializableAttribute
dotnet_diagnostic.CA2237.severity = none

# Provide correct arguments to formatting methods analyzer
dotnet_diagnostic.CA2241.severity = suggestion

# Test for NaN correctly
dotnet_diagnostic.CA2242.severity = error

# Attribute string literals should parse correctly
dotnet_diagnostic.CA2243.severity = none

# Do not duplicate indexed element initializations
dotnet_diagnostic.CA2244.severity = error

# Avoid property self assignment
dotnet_diagnostic.CA2245.severity = error

# Assigning symbol and its member in same statement
dotnet_diagnostic.CA2246.severity = error

# Argument passed to TaskCompletionSource constructor should be TaskCreationOptions
# enum instead of TaskContinuationOptions enum
dotnet_diagnostic.CA2247.severity = warning

# Provide correct 'enum' argument to 'Enum.HasFlag'
dotnet_diagnostic.CA2248.severity = suggestion

# Consider using String.Contains instead of String.IndexOf
dotnet_diagnostic.CA2249.severity = suggestion

# Use ThrowIfCancellationRequested
dotnet_diagnostic.CA2250.severity = suggestion

# Use String.Equals over String.Compare
dotnet_diagnostic.CA2251.severity = silent

# Detect preview feature
dotnet_diagnostic.CA2252.severity = error

# Named placeholders should not be numeric values
dotnet_diagnostic.CA2253.severity = suggestion

# Template should be a static expression
dotnet_diagnostic.CA2254.severity = suggestion

# The ModuleInitializer attribute should not be used in libraries
dotnet_diagnostic.CA2255.severity = warning

# All members declared in parent interfaces must have an implementation in a DynamicInterfaceCastableImplementation-attributed interface
dotnet_diagnostic.CA2256.severity = warning

# Members defined on an interface with 'DynamicInterfaceCastableImplementationAttribute' should be 'static'
dotnet_diagnostic.CA2257.severity = warning

# Providing a 'DynamicInterfaceCastableImplementation' interface in Visual Basic is unsupported
dotnet_diagnostic.CA2258.severity = warning
